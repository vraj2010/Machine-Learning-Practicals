# -*- coding: utf-8 -*-
"""Machine Learning Practicals.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HW0nNbQXkEmPmehoeDy2dSVoSJJKitkw

# **Practical 1**

**Aim -- Explore any one machine learning tools (like Weka, Tensorflow, Scikit-learn, Colab, etc.)**
"""

# Importing pandas library
import pandas as pd

# Declaring a list
a = [10, 8, 9, 8, 7.5]

# Using series function of pandas library to provide labels to list elements
var = pd.Series(a, index = ["Vraj", "Vatsal", "Vainavi", "Dharmil", "Rahi"])

print(var)



# Taking Input from User
name=input("Enter Name: ")
number=input("Enter Mobile Number: ")
email=input("Enter Email ID: ")
birthdate=input("Enter Date of Birth: ")

# Printing the Input got from the User
print(name)
print(number)
print(email)
print(birthdate)

10 + 20

# Checking whether a String is Palindrome or not
print("Checking whether a String is Palindrome or not")

# Taking Input from User
string = input(("Enter a String: "))

# Slicing the string in reverse fashion and comparing it with original string
if(string == string[::-1]):
      print("String is Palindrome")
else:
      print("String is not a Palindrome")

"""# **Practical 2**

**Aim -- Write a NumPy program to implement following operation**

1.   **To convert a list of numeric values into a one-dimensional NumPy array**
2.   **To create a 3x3 matrix with values ranging from 2 to 10**
3.   **To append values at the end of an array**
4.   **To create another shape from an array without changing its data (3\*2 to 2\*3)**
"""

# Importing NumPy Library
import numpy as np

# Converting a list of numeric values into a One-dimensional NumPy Array
print("Converting a list of numeric values into a One-dimensional NumPy Array")

# Declaring a list
arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print("Original Array : ", arr1)

# Converting the list to NumPy Array
arr2 = np.array(arr1)
print("One-dimensional NumPy Array : ", arr2)

# Importing NumPy Library
import numpy as np

# Creating a 3x3 matrix with values ranging from 2 to 10
print("Creating a 3x3 matrix with values ranging from 2 to 10")

# Declaring a NumPy Array
arr1 = np.arange(2, 11)
print("1 * 9 NumPy Array : \n", arr1)

# Reshaping 1*9 Array to 3*3 Array
arr2 = arr1.reshape(3,3)
print("3 * 3 NumPy Array : \n", arr2)

# Importing NumPy Library
import numpy as np

# Appending values at the end of an Array
print("Appending values at the end of an Array")

# Declaring a NumPy Array
arr1 = np.array([1, 2, 3, 4, 5])
print("Original Array : ", arr1)

# Appending values using the append function
arr2 = np.append(arr1, [6, 7, 8, 9])
print("Array after Appending values : ", arr2)

# Importing NumPy Library
import numpy as np

# Creating another shape from an array without changing its data (3*2 to 2*3)
print("Creating another shape from an array without changing its data (3*2 to 2*3)")

# Declaring 3*2 NumPy Array
arr1 = np.array([[1, 2], [3, 4], [5, 6]])
print("3 * 2 NumPy Array : \n",arr1)

# Reshaping 3*2 Array to 2*3 Array
arr2 = arr1.reshape(2, 3)
print("2 * 3 NumPy Array : \n",arr2)

"""# **Practical 3**

**Aim -- Write a NumPy program to implement following operation**

1.   **To split an array of 14 elements into 3 arrays, each with 2, 4, and 8 elements in the original order**
2.   **To stack arrays horizontally (column wise).**
"""

# Importing NumPy Library
import numpy as np

# Spliting an array of 14 elements into 3 arrays, each with 2, 4, and 8 elements in the original order
print("Spliting an array of 14 elements into 3 arrays, each with 2, 4, and 8 elements in the original order")

# Declaring NumPy Array with 14 Elements
arr1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
print("Original Array : \n", arr1)

# Splitting Array using spit function
arr2 = np.split(arr1, [2, 6])
print('Array after Splitting : \n',arr2)

# Importing NumPy Library
import numpy as np

# Stacking arrays horizontally (column wise)
print("Stacking arrays horizontally and vertically")

# Declaring NumPy Arrays
a = np.array([ [1, 2], [3, 4] ])
b = np.array([ [5, 6], [7, 8] ])

# Using hstack and vstack functions to stack arrays horizontally and vertically
c = np.hstack((a, b))
d = np.vstack((a,b))

print("Arrays stacked horizontally (column wise) : \n",c)
print("Arrays stacked vertically (row wise) : \n",d)

"""# **Practical 4**

**Aim -- Write a NumPy program to implement following operation**

1.   **To add, subtract, multiply, divide arguments element-wise**
2.   **To round elements of the array to the nearest integer**
3.   **To calculate mean across dimension, in a 2D numpy array**
4.   **To calculate the difference between neighboring elements, element-wise of a given array**
"""

# Importing NumPy Library
import numpy as np

# Adding, Subtracting, Multiplying and Dividing arguments element-wise
print("Adding, Subtracting, Multiplying and Dividing arguments element-wise")

# Performing Mathematical Operations and Displaying output
print("Addition : ", np.add(3, 4))
print("Subtraction : ", np.subtract(4, 3))
print("Multiplication : ", np.multiply(3, 4))
print("Division : ", np.divide(3, 4))

# Importing NumPy Library
import numpy as np

# Rounding elements of the array to the nearest integer
print("Rounding elements of the array to the nearest integer")

# Declaring NumPy Array
arr1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
print('Original Array : ',arr1)

# Rounding Elements of Array using round function
arr2 = np.rint(arr1)
print("Array after Rounding Elements : ",arr2)

# Importing NumPy Library
import numpy as np

# Calculating mean across dimension in a 2D NumPy Array
print("Calculating mean across dimension in a 2D NumPy Array")

# Declaring NumPy Arrays
a = np.array([[2, 4],[3, 5]])

# Calculating Mean using mean function
b = np.mean(a, axis=0)
c = np.mean(a, axis=1)
print("Applying mean() function along axis 0 : ",b)
print("Applying mean() function along axis 1 : ",c)

# Importing NumPy Library
import numpy as np

# Calculating the difference between neighboring elements, element-wise of a given Array
print("Calculating the difference between neighboring elements, element-wise of a given Array")

# Declaring NumPy Array
arr = np.array([1, 2, 3, 4, 5, 7, 7, 8, 9, 10, 11, 13, 13, 14])
print("Original Array : ",arr)

# Calculating Difference of elements using diff function
diff = np.diff(arr)
print("Difference : ", diff)

"""# **Practical 5**

**Aim -- Write a NumPy program to implement following operation**

1. **To find the maximum and minimum value of a given flattened array**
2. **To compute the mean, standard deviation, and variance of a given array along the second axis**
"""

# Importing NumPy Library
import numpy as np

# Declaring NumPy Flattened Array
a = np.array([[2, 3, 4],[5, 6, 7]])
print("Original Array : \n", a)

# Finding max value element from the Array
max = np.amax(a)
print("Maximum Value : ",max)

# Finding min value element from the Array
min = np.amin(a)
print("Minimum Value : ",min)

# Importing NumPy Library
import numpy as np

# Declaring Array using arange function
a = np.arange(10)
print("Original Array : ",a)

# Calculating mean for the given array.
m = np.mean(a)
print("Mean : ",m)

# Calculating Standard Deviation for the given array.
s = np.std(a)
print("Standard Deviation : ",s)

# Calculating Variance for the given array.
v = np.var(a)
print("Variance : ",v)

"""# **Practical 6**

**Aim -- Write a Pandas program to implement following operation**

1. **To convert a NumPy array to a Pandas series**
2. **To convert the first column of a DataFrame as a Series**
3. **To create the mean and standard deviation of the data of a given Series**
4. **To sort a given Series**
"""

# Importing NumPy Library and Pandas Library
import numpy as np
import pandas as pd

# Declaring NumPy Array
a = np.array(['V', 'R', 'A', 'J'])
columns = np.array([1, 2, 3, 4])
print("NumPy Array : \n",a)

# Converting Array to Series
s = pd.Series(a, index=columns)
print("Pandas Series : ")
print(s)

# Importing Pandas Library
import pandas as pd

# Declaring Dictionary
dict = {'Name': ['Vraj', 'Vainavi', 'Dharmil', 'Vatsal'],
       'Age': [18, 17, 16, 17,]}

# Declaring DataFrame
df = pd.DataFrame(data = dict)
print("Original DataFrame : ")
print(df, end="\n\n")

# Converting First Column of DataFrame to Series
s1 = df.iloc[:,0]
print("1st column of DataFrame converted to Series : ")
print(s1)

# Importing Pandas Library
import pandas as pd

# Declaring Series using Series function
s = pd.Series(data=[1, 2, 3, 4, 5, 6])
print("Original Series : ")
print(s, end="\n\n")

# Calculating Mean
m = s.mean()
print("Mean : ",m)

# Calculating Standard Deviation
s = s.std()
print("Standard Deviation : ",s)

# Importing Pandas Library
import pandas as pd

# Declaring Series using Series function
s = pd.Series(data=[9, 7, 5, 4, 1, 2])
print("Original Series : ")
print(s, end="\n\n")

# Performing Sort Operation
sorted_s = s.sort_values()
print("Sorted Data Series : ")
print(sorted_s)

"""# **Practical 7**

**Aim -- Write a Pandas program to implement following operation**

1. **To create a dataframe from a dictionary and display it**
2. **To sort the DataFrame first by 'name' in ascending order**
3. **To delete the one specific column from the DataFrame**
4. **To write a DataFrame to CSV file using tab separator**
"""

# Importing Pandas Library
import pandas as pd

# Declaring Dictionary
dict = {'Name': ['Vraj', 'Vainavi', 'Dharmil', 'Vatsal'],
       'Age': [18, 17, 16, 17,]}
print("Dictionary : ",dict, end="\n\n")

# Converting Dictionary to DataFrame
df = pd.DataFrame(data = dict)
print("DataFrame : ")
print(df)

# Importing Pandas Library
import pandas as pd

# Declaring Dictionary
dict = {'Name': ['Vraj', 'Vainavi', 'Dharmil', 'Vatsal'],
       'Age': [18, 17, 16, 17]}

# Performing Sort Operation
df = pd.DataFrame(dict)
print("Before sorting : ")
print(df, end="\n\n")
print("After sorting : ")
print(df.sort_values(by='Name',ascending=True))

# Importing Pandas Library
import pandas as pd

# Declaring Dictionary
data = {
'A': ['A1', 'A2', 'A3', 'A4', 'A5'],
'B': ['B1', 'B2', 'B3', 'B4', 'B5'],
'C': ['C1', 'C2', 'C3', 'C4', 'C5'],
'D': ['D1', 'D2', 'D3', 'D4', 'D5'],
'E': ['E1', 'E2', 'E3', 'E4', 'E5']}

# Creating DataFrame out of Dictionary
df = pd.DataFrame(data)
print("Original DataFrame : ")
print(df, end="\n\n")

# Dropping Column B
print("DataFrame after dropping Column B : ")
print(df.drop(['B'], axis=1))

# Importing Pandas Library
import pandas as pd

# Declaring Dictionary
dict = {'Col1': [1, 4, 3, 4, 5], 'Col2': [4, 5, 6, 7, 8], 'Col3': [7, 8, 9, 0, 1]}

# Creating DataFrame out of Dictionary
df = pd.DataFrame(data=dict)
print("Original DataFrame : ")
print(df,end='\n\n')

# Storing DataFrame in .csv file
print('Data from student.csv file : ')
df.to_csv('student.csv', sep='\t', index=False)
new_df = pd.read_csv('student.csv')
print(new_df)

"""# **Practical 8**

**Aim -- Write a Pandas program to create a line plot of the opening closing stock prices of given company between two specific dates.**
"""

# Importing Pandas Library and Matplotlib Library
import pandas as pd
import matplotlib.pyplot as plt

# Reading Data from CSV File
df = pd.read_csv("alphabet_stock_data.csv")

# Defining Start Date and End Date
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-09-30')
df['Date'] = pd.to_datetime(df['Date'])
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)

df2 = df.loc[new_df]
plt.figure(figsize=(10,10))
df2.plot(x='Date', y=['Open', 'Close']);
plt.suptitle('Opening/Closing stock prices of Alphabet Inc.\n 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.xlabel("Date",fontsize=12, color='black')
plt.ylabel("Price", fontsize=12, color='Blue')
plt.show()

"""# **Practical 9**

**Aim -- Write a Pandas program to create a plot of Open, High, Low, Close, Adjusted Closing prices and Volume of given company between two specific dates.**
"""

# Importing Pandas Library and Matplotlib Library
import pandas as pd
import matplotlib.pyplot as plt

# Reading Data from CSV File
df = pd.read_csv("alphabet_stock_data.csv")

# Defining Start Date and End Date
start_date = pd.to_datetime('2020-4-1')
end_date = pd.to_datetime('2020-9-30')
df['Date'] = pd.to_datetime(df['Date'])
new_df = (df['Date']>= start_date) & (df['Date']<= end_date)


df1 = df.loc[new_df]
stock_data = df1.set_index('Date')
stock_data.Volume /= 1000
ax = plt.gca()

# Plotting the Graph
stock_data.plot( y = 'Open', ax = ax, color="green")
stock_data.plot( y = 'Close', ax = ax, color="red" )
stock_data.plot( y = 'High', ax = ax, color="yellow" )
stock_data.plot( y = 'Low', ax = ax, color="black" )
stock_data.plot( y = 'Adj Close', ax = ax, color="blue" )
plt.legend(loc = 'best')
plt.suptitle('Open, High, Low, Close, Adj Close prices & Volume of Alphabet Inc. \n From 01-04-2020 to 30-09-2020', fontsize=12, color='black')
plt.show()

"""# **Practical 10**

**Aim -- Write a Pandas program to implement following operation**

1. **To find and drop the missing values from the given dataset**
2. **To remove the duplicates from the given dataset**
"""

# Importing NumPy Library and Pandas Library
import numpy as np
import pandas as pd

# Declaring Dictionary
dict = {'First Score' : [100, 90, np.nan, 85],
        'Second Score' : [100, np.nan, np.nan, 85],
        'Third Score' : [100, 90, np.nan, np.nan],
        'Forth Score' : [100, 90, 80, 85]}
df = pd.DataFrame(dict)

# Dropping Null Values
print("Original DataFrame : ")
print(df, end="\n\n")
print("DataFrame after Dropping Null Value : ")
print(df.dropna())

# Importing NumPy Library and Pandas Library
import numpy as np
import pandas as pd

# Declaring Dictionary
dict = {'A' : ['Team A', 'Team B', 'Team C', 'Team D', 'Team E'],
        'B' : [50, 40, 40, 30, 50],
        'C' : [True, False, True, False, False]}
df1 = pd.DataFrame(dict)

# Dropping Duplicate Values
print("Original DataFrame : ")
print(df1)
print("DatFrame After Dropping Duplicate Values : ")
print(df1.drop_duplicates())

"""# **Practical 11**

**Aim -- Write a Pandas program to filter all columns where all entries present, check which rows and columns has a NaN and finally drop rows with any NaNs from the given dataset.**
"""

# Importing Pandas and NumPy Library
import pandas as pd
import numpy as np

# Declaring DataFrame
df=pd.DataFrame()
l={'a':[10,20,30,40,50,60,70,80],'b':[1,2,3,4,5,6,7,8],'c':[4,5,np.nan,8,4,8,np.nan,33]}
df=pd.DataFrame(l)
print("Original DataFrame : ")
print(df)

# Filtering the DataFrame
print("After Filtering Null Values from DataFrame : ")
print(df.loc[:, df.notnull().all()])

"""# **Practical 12**

**Aim -- Write a Python program using Scikit-learn to print the keys, number of rows-columns, feature names and the description of the given data.**
"""

# Importing Sci-kit Learn Dataset
from sklearn.datasets import load_iris
data = load_iris()

# Performing Sci-kit learn Functions
print("Keys in the dataset:")
print(data.keys())
n_samples, n_features = data.data.shape
print(f"\nNumber of rows: {n_samples}")
print(f"Number of columns (features): {n_features}")
print("\nFeature names:")
print(data.feature_names)
print("\nDataset Description:")
print(data.DESCR)

"""# **Practical 13**

**Aim -- Write a Python program to implement K-Nearest Neighbour supervised machine learning algorithm for given dataset.**
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_wine

wine_data = load_wine()
x = wine_data.data
y = wine_data.target

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.2)

knn_class = KNeighborsClassifier(n_neighbors = 5)
knn_class.fit(x_train,y_train)

y_pred = knn_class.predict(x_test)
acc = accuracy_score(y_test,y_pred)
print(f"Accuracy:{acc*100}")
plt.figure()

plt.scatter(x_test[:,0],x_test[:,1],c = y_test,label='Actual')

plt.scatter(x_test[:,0],x_test[:,1],label = "Predict",marker='x')

plt.show()

"""# **Practical 14**

**Aim -- Write a Python program to implement a machine learning algorithm for given dataset. (It is recommended to assign different machine learning algorithms group wise - micro project)**
"""

# importing the necessary Python libraries and the dataset
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
data = pd.read_csv("/content/Language_Detection.csv")

# Check whether this dataset contains any null values or not
data.isnull().sum()

# Languages present in this dataset
data["Language"].value_counts()
# This dataset contains 22 languages with 1000 sentences from each language.
# This is a very balanced dataset with no missing values.
# This dataset is completely ready to be used to train a machine learning model.

# Spliting the data into training and test sets:
x = np.array(data["Text"])
y = np.array(data["Language"])

cv = CountVectorizer()
X = cv.fit_transform(x)
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.33,
                                                    random_state=42)

# To perform Multiclass Classification we used Multinomial Naïve Bayes Algorithm
model = MultinomialNB()
model.fit(X_train,y_train)
model.score(X_test,y_test)

# Detect the language of a text by taking a user input
user = input("Enter a Text: ")
data = cv.transform([user]).toarray()
output = model.predict(data)
print(output)

"""# **Extra Practical 1**

**Aim -- Write a program to make a Pandas DataFrame with a Two-dimensional list.**
"""

import pandas as pd

# List
lst = [['Vraj', 'Patel', 18],
       ['Vainavi', 'Raval', 18]]

df = pd.DataFrame(lst, columns =['First Name', 'Last Name', 'Age'])
print(df)

"""# **Extra Practical 2**

**Aim -- Write a program to Create Bar Chart using matplotlib.**
"""

import matplotlib.pyplot as plt
import pandas as pd

data = {'country': ['A', 'B', 'C', 'D', 'E'],
        'gdp_per_capita': [45000, 42000, 52000, 49000, 47000]
       }
df = pd.DataFrame(data)

colors = ['green','blue','purple','brown','teal']
plt.bar(df['country'], df['gdp_per_capita'], color=colors)
plt.title('Country Vs GDP Per Capita', fontsize=14)
plt.xlabel('Country', fontsize=14)
plt.ylabel('GDP Per Capita', fontsize=14)
plt.grid(True)
plt.show()

"""# **Extra Practical 3**

**Aim -- Write a Python program to implement decision tree in supervised machine learning algorithm for given dataset.**
"""

import sys
import matplotlib
matplotlib.use('Agg')

import pandas
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt

df = pandas.read_csv("data.csv")

d = {'UK': 0, 'USA': 1, 'N': 2}
df['Nationality'] = df['Nationality'].map(d)
d = {'YES': 1, 'NO': 0}
df['Go'] = df['Go'].map(d)

features = ['Age', 'Experience', 'Rank', 'Nationality']

X = df[features]
y = df['Go']

dtree = DecisionTreeClassifier()
dtree = dtree.fit(X, y)

tree.plot_tree(dtree, feature_names=features)

#Two  lines to make our compiler able to draw:
plt.savefig(sys.stdout.buffer)
sys.stdout.flush()

